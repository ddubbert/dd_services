version: "3.8"
services:
  # zookeeper_1:
  #   container_name: zookeeper_1
  #   image: dd_services/zookeeper:3.2.3
  #   build:
  #     context: ./kafka/zookeeper
  #   volumes:
  #     - ./kafka/config/zookeeper_1/zookeeper.properties:/kafka/config/zookeeper.properties
  #     - zookeeper_1:/tmp/zookeeper/
  #   networks:
  #     - kafka

  # kafka_1:
  #   container_name: kafka_1
  #   image: dd_services/kafka:3.2.3
  #   build: 
  #     context: ./kafka
  #   volumes:
  #     - ./kafka/config/kafka_1/server.properties:/kafka/config/server.properties
  #     - kafka_1:/tmp/kafka-logs/
  #   networks:
  #     - kafka
  #   depends_on:
  #     - zookeeper_1

  users:
    container_name: users
    restart: always
    image: dd_services/users
    build:
        context: ./users
    environment:
      - HOST=${USERS_HOST}
      - PORT=${USERS_PORT}
      - DB_URL=mongodb://${USERS_DATABASE_USER}:${USERS_DATABASE_PASSWORD}@${DATABASE_HOST}:${DATABASE_PORT}/${USERS_DATABASE_NAME}
      - DB_HOST=${DATABASE_HOST}
      - DB_PORT=${DATABASE_PORT}
      - DB_DATABASE=${USERS_DATABASE_NAME}
      - DB_USER=${USERS_DATABASE_USER}
      - DB_PASSWORD=${USERS_DATABASE_PASSWORD}
      - ACCESS_KEY_PASSPHRASE=${ACCESS_KEY_PASSPHRASE}
      - REFRESH_KEY_PASSPHRASE=${REFRESH_KEY_PASSPHRASE}
    volumes:
      - users:/services/users
    links:
      - "leader_db:db"
    depends_on:
      - leader_db
    networks:
      - kafka
      - services
      - database
      - public

  files:
    container_name: files
    restart: always
    image: dd_services/files
    build:
        context: ./files
    ports:
      - ${FILES_UPLOAD_PORT}:80
    volumes:
      - files:/services/files
    links:
      - "leader_db:db"
    environment:
      - HOST=${FILES_HOST}
      - PORT=${FILES_PORT}
      - UPLOAD_PORT=${FILES_UPLOAD_PORT}
      - DB_URL=mongodb://${FILES_DATABASE_USER}:${FILES_DATABASE_PASSWORD}@${DATABASE_HOST}:${DATABASE_PORT}/${FILES_DATABASE_NAME}
      - DB_HOST=${DATABASE_HOST}
      - DB_PORT=${DATABASE_PORT}
      - DB_DATABASE=${FILES_DATABASE_NAME}
      - DB_USER=${FILES_DATABASE_USER}
      - DB_PASSWORD=${FILES_DATABASE_PASSWORD}
      - ACCESS_KEY_PASSPHRASE=${ACCESS_KEY_PASSPHRASE}
    depends_on:
      - leader_db
    networks:
      - kafka
      - services
      - public
      - database

  sessions:
    container_name: sessions
    restart: always
    image: dd_services/sessions
    build:
        context: ./sessions
    volumes:
      - sessions:/services/sessions
    links:
      - "leader_db:db"
    environment:
      - HOST=${SESSIONS_HOST}
      - PORT=${SESSIONS_PORT}
      - DB_URL=mongodb://${SESSIONS_DATABASE_USER}:${SESSIONS_DATABASE_PASSWORD}@${DATABASE_HOST}:${DATABASE_PORT}/${SESSIONS_DATABASE_NAME}
      - DB_HOST=${DATABASE_HOST}
      - DB_PORT=${DATABASE_PORT}
      - DB_DATABASE=${SESSIONS_DATABASE_NAME}
      - DB_USER=${SESSIONS_DATABASE_USER}
      - DB_PASSWORD=${SESSIONS_DATABASE_PASSWORD}
      - ACCESS_KEY_PASSPHRASE=${ACCESS_KEY_PASSPHRASE}
    depends_on:
      - leader_db
    networks:
      - kafka
      - services
      - database

  gateway:
    container_name: gateway
    restart: always
    image: dd_services/gateway
    build:
        context: ./gateway
    ports:
      - 80:80
    volumes:
      # - ./gateway:/services/gateway
      - gateway:/services/gateway
    networks:
      - kafka
      - services
      - public
    depends_on:
      - files
      - users
      - sessions

  leader_db:
    image: mongo:latest
    container_name: leader_db
    environment:
      - MONGO_DATA_DIR=/data/db
      - MONGO_LOG_DIR=/data/logs
      - MONGO_INITDB_DATABASE=${ROOT_DATABASE_NAME}
      - MONGO_INITDB_ROOT_USERNAME=${ADMIN_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${ADMIN_PASSWORD}
      - REPLICA_SET_NAME=$REPLICA_SET_NAME
      - LEADER_DATABASE_HOST=${DATABASE_HOST}
      - BACKUP_DATABASE_1_HOST=${BACKUP_DATABASE_1_HOST}
      - BACKUP_DATABASE_2_HOST=${BACKUP_DATABASE_2_HOST}
      - DATABASE_PORT=${DATABASE_PORT}
      - USERS_DATABASE_NAME=${USERS_DATABASE_NAME}
      - USERS_DATABASE_USER=${USERS_DATABASE_USER}
      - USERS_DATABASE_PASSWORD=${USERS_DATABASE_PASSWORD}
      - FILES_DATABASE_NAME=${FILES_DATABASE_NAME}
      - FILES_DATABASE_USER=${FILES_DATABASE_USER}
      - FILES_DATABASE_PASSWORD=${FILES_DATABASE_PASSWORD}
      - SESSIONS_DATABASE_NAME=${SESSIONS_DATABASE_NAME}
      - SESSIONS_DATABASE_USER=${SESSIONS_DATABASE_USER}
      - SESSIONS_DATABASE_PASSWORD=${SESSIONS_DATABASE_PASSWORD}
    expose:
        - ${DATABASE_PORT}
    restart: always
    volumes:
      - leaderDB:/data/db
      - leaderDB_config:/data/configdb
      - leaderDB_logs:/data/logs
      - ./dbs/scripts/rs-init.sh:/scripts/rs-init.sh
      # - ./dbs/scripts/mongo-init.sh:/docker-entrypoint-initdb.d/mongo-init.sh
      - ./dbs/keyfile/keyfile.key:/keyfile/keyfile.key
    entrypoint:
      - bash
      - -c
      - |
          chmod 400 /keyfile/keyfile.key
          chown 999:999 /keyfile/keyfile.key
          chmod +x /scripts/rs-init.sh
          exec docker-entrypoint.sh $$@ 
    command: ["/usr/bin/mongod", "--bind_ip_all", "--replSet", "$REPLICA_SET_NAME", "--logpath", "/data/logs/mongo.log", "--auth", "--keyFile", "./keyfile/keyfile.key"]
    networks:
      - database

  backup_db_1:
    image: mongo:latest
    container_name: backup_db_1
    environment:
      - MONGO_DATA_DIR=/data/db
      - MONGO_LOG_DIR=/data/logs
    expose:
        - ${DATABASE_PORT}
    entrypoint:
        - bash
        - -c
        - |
            chmod 400 /keyfile/keyfile.key
            chown 999:999 /keyfile/keyfile.key
            exec docker-entrypoint.sh $$@ 
    command: [ "/usr/bin/mongod", "--bind_ip_all", "--replSet", $REPLICA_SET_NAME, "--logpath", "/data/logs/mongo.log", "--auth", "--keyFile", "./keyfile/keyfile.key" ]
    restart: always
    volumes:
      - backupDB_1:/data/db
      - backupDB_1_config:/data/configdb
      - backupDB_1_logs:/data/logs
      - ./dbs/keyfile/keyfile.key:/keyfile/keyfile.key
    networks:
      - database

  backup_db_2:
    image: mongo:latest
    container_name: backup_db_2
    environment:
      - MONGO_DATA_DIR=/data/db
      - MONGO_LOG_DIR=/data/logs
    expose:
        - ${DATABASE_PORT}
    entrypoint:
      - bash
      - -c
      - |
          chmod 400 /keyfile/keyfile.key
          chown 999:999 /keyfile/keyfile.key
          exec docker-entrypoint.sh $$@ 
    command: [ "/usr/bin/mongod", "--bind_ip_all", "--replSet", $REPLICA_SET_NAME, "--logpath", "/data/logs/mongo.log", "--auth", "--keyFile", "./keyfile/keyfile.key" ]
    restart: always
    volumes:
      - backupDB_2:/data/db
      - backupDB_2_config:/data/configdb
      - backupDB_2_logs:/data/logs
      - ./dbs/keyfile/keyfile.key:/keyfile/keyfile.key
    networks:
      - database

networks: 
  kafka:
    name: kafka
    internal: true
  services:
    name: services
    internal: true
  public:
    name: public
    internal: false
  database:
    name: database
    internal: true

volumes:
  gateway:
    driver_opts:
      type: none
      device: ${PWD}/gateway
      o: bind
  users:
    # driver_opts:
    #   type: none
    #   device: ${PWD}/users
    #   o: bind
  files:
    # driver_opts:
    #   type: none
    #   device: ${PWD}/files
    #   o: bind
  sessions:
    # driver_opts:
    #   type: none
    #   device: ${PWD}/sessions
    #   o: bind
  leaderDB:
    driver_opts:
      type: none
      device: ${PWD}/dbs/leader/data
      o: bind
  leaderDB_config:
    driver_opts:
      type: none
      device: ${PWD}/dbs/leader/config
      o: bind
  leaderDB_logs:
    driver_opts:
      type: none
      device: ${PWD}/dbs/leader/logs
      o: bind
  backupDB_1:
    driver_opts:
      type: none
      device: ${PWD}/dbs/backup_1/data
      o: bind
  backupDB_1_config:
    driver_opts:
      type: none
      device: ${PWD}/dbs/backup_1/config
      o: bind
  backupDB_1_logs:
    driver_opts:
      type: none
      device: ${PWD}/dbs/backup_1/logs
      o: bind
  backupDB_2:
    driver_opts:
      type: none
      device: ${PWD}/dbs/backup_2/data
      o: bind
  backupDB_2_config:
    driver_opts:
      type: none
      device: ${PWD}/dbs/backup_2/config
      o: bind
  backupDB_2_logs:
    driver_opts:
      type: none
      device: ${PWD}/dbs/backup_2/logs
      o: bind
  kafka_1:
    driver_opts:
      type: none
      device: ${PWD}/kafka/data/kafka_1
      o: bind
  zookeeper_1:
    driver_opts:
      type: none
      device: ${PWD}/kafka/data/zookeeper_1
      o: bind