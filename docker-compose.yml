version: "3.8"
services:
  zookeeper_1:
    container_name: zookeeper_1
    image: dd_services/zookeeper:3.2.3
    restart: unless-stopped
    build:
      context: ./kafka/zookeeper
    volumes:
      - ./kafka/config/zookeeper_1/zookeeper.properties:/kafka/config/zookeeper.properties
      - zookeeper_1:/tmp/zookeeper/
    networks:
      - kafka

  kafka_1:
    container_name: kafka_1
    image: dd_services/kafka:3.2.3
    restart: unless-stopped
    build: 
      context: ./kafka
    volumes:
      - ./kafka/config/kafka_1/server.properties:/kafka/config/server.properties
      - kafka_1:/tmp/kafka-logs/
    networks:
      - kafka
    depends_on:
      - zookeeper_1

  redisCache:
    container_name: redisCache
    image: redis:6.2-alpine
    restart: unless-stopped
    command: "redis-server --save 20 1 --loglevel warning --requirepass ${CACHE_PASSWORD}"
    volumes: 
      - redisCache:/data
    networks:
      - redis

  users:
    container_name: users
    restart: unless-stopped
    image: dd_services/users
    build:
        context: ./users
    ports:
      - ${USERS_PORT}:${USERS_PORT}
    environment:
      - HOST=${USERS_HOST}
      - PORT=${USERS_PORT}
      - DB_URL=mongodb://${USERS_DATABASE_USER}:${USERS_DATABASE_PASSWORD}@${DATABASE_HOST}:${DATABASE_PORT}/${USERS_DATABASE_NAME:-dd_services_users}
      - DATABASE_NAME=${USERS_DATABASE_NAME:-dd_services_users}
      - ACCESS_KEY_PASSPHRASE=${ACCESS_KEY_PASSPHRASE}
      - REFRESH_KEY_PASSPHRASE=${REFRESH_KEY_PASSPHRASE}
      - ACCESS_TOKEN_TTL=${ACCESS_TOKEN_TTL}
      - REFRESH_TOKEN_TTL=${REFRESH_TOKEN_TTL}
      - KAFKA_URL=kafka_1:9092
      - CACHE_HOST=${CACHE_HOST}
      - CACHE_PORT=${CACHE_PORT}
      - CACHE_PASSWORD=${CACHE_PASSWORD}
      - GATEWAY_HOST=${GATEWAY_HOST}
      - GATEWAY_PORT=${GATEWAY_PORT}
      - GATEWAY_BEARER_TOKEN=${GATEWAY_BEARER_TOKEN}
    volumes:
      - users:/services/users
    links:
      - "leader_db:db"
    depends_on:
      - leader_db
      - redisCache
      - kafka_1
    networks:
      - kafka
      - services
      - database
      - redis
      # - public

  files:
    container_name: files
    restart: unless-stopped
    image: dd_services/files
    build:
        context: ./files
    ports:
      - ${FILES_UPLOAD_PORT}:${FILES_UPLOAD_PORT}
    volumes:
      - files:/services/files
    links:
      - "leader_db:db"
    environment:
      - HOST=${FILES_HOST}
      - PORT=${FILES_PORT}
      - UPLOAD_HOST=${FILES_UPLOAD_HOST}
      - UPLOAD_PORT=${FILES_UPLOAD_PORT}
      - UPLOAD_LINK_TTL=${UPLOAD_LINK_TTL}
      - DB_URL=mongodb://${FILES_DATABASE_USER}:${FILES_DATABASE_PASSWORD}@${DATABASE_HOST}:${DATABASE_PORT}/${FILES_DATABASE_NAME:-dd_services_files}
      - DATABASE_NAME=${FILES_DATABASE_NAME:-dd_services_files}
      - ACCESS_KEY_PASSPHRASE=${ACCESS_KEY_PASSPHRASE}
      - KAFKA_URL=kafka_1:9092
      - CACHE_HOST=${CACHE_HOST}
      - CACHE_PORT=${CACHE_PORT}
      - CACHE_PASSWORD=${CACHE_PASSWORD}
      - GATEWAY_BEARER_TOKEN=${GATEWAY_BEARER_TOKEN}
      - MAX_SESSION_UPLOAD_SPACE_IN_BYTE=${MAX_SESSION_UPLOAD_SPACE_IN_BYTE}
      - MAX_USER_UPLOAD_SPACE_IN_BYTE=${MAX_USER_UPLOAD_SPACE_IN_BYTE}
      - MAX_FILE_SIZE=${MAX_FILE_SIZE}
      - MAX_FILE_UPLOAD_AMOUNT=${MAX_FILE_UPLOAD_AMOUNT}
    depends_on:
      - leader_db
      - redisCache
      - kafka_1
    networks:
      - kafka
      - services
      - public
      - database
      - redis

  sessions:
    container_name: sessions
    restart: unless-stopped
    image: dd_services/sessions
    build:
        context: ./sessions
    ports:
      - ${SESSIONS_PORT}:${SESSIONS_PORT}
    volumes:
      - sessions:/services/sessions
    links:
      - "leader_db:db"
    environment:
      - HOST=${SESSIONS_HOST}
      - PORT=${SESSIONS_PORT}
      - DB_URL=mongodb://${SESSIONS_DATABASE_USER}:${SESSIONS_DATABASE_PASSWORD}@${DATABASE_HOST}:${DATABASE_PORT}/${SESSIONS_DATABASE_NAME:-dd_services_sessions}
      - DATABASE_NAME=${SESSIONS_DATABASE_NAME:-dd_services_sessions}
      - ACCESS_KEY_PASSPHRASE=${ACCESS_KEY_PASSPHRASE}
      - KAFKA_URL=kafka_1:9092
      - CACHE_HOST=${CACHE_HOST}
      - CACHE_PORT=${CACHE_PORT}
      - CACHE_PASSWORD=${CACHE_PASSWORD}
      - GATEWAY_BEARER_TOKEN=${GATEWAY_BEARER_TOKEN}
    depends_on:
      - leader_db
      - redisCache
      - kafka_1
    networks:
      - kafka
      - services
      - database
      - redis

  gateway:
    container_name: gateway
    restart: unless-stopped
    image: dd_services/gateway
    build:
        context: ./gateway
    ports:
      - ${GATEWAY_PORT}:${GATEWAY_PORT}
    volumes:
      - gateway:/services/gateway
    environment:
      - HOST=${GATEWAY_HOST}
      - PORT=${GATEWAY_PORT}
      - SESSIONS_URL=http://${SESSIONS_HOST}:${SESSIONS_PORT}/graphql
      - FILES_URL=http://${FILES_HOST}:${FILES_PORT}/graphql
      - USERS_URL=http://${USERS_HOST}:${USERS_PORT}/graphql
    networks:
      - kafka
      - services
      - public
    depends_on:
      - files
      - users
      - sessions

  subscriptions:
      container_name: subscriptions
      restart: unless-stopped
      image: dd_services/subscriptions
      build:
          context: ./subscriptions
      ports:
        - ${SUBSCRIPTIONS_PORT}:${SUBSCRIPTIONS_PORT}
      volumes:
        - subscriptions:/services/subscriptions
      environment:
        - HOST=${SUBSCRIPTIONS_HOST}
        - PORT=${SUBSCRIPTIONS_PORT}
        - DB_URL=mongodb://${SUBSCRIPTIONS_DATABASE_USER}:${SUBSCRIPTIONS_DATABASE_PASSWORD}@${DATABASE_HOST}:${DATABASE_PORT}/${SUBSCRIPTIONS_DATABASE_NAME:-dd_services_subscriptions}
        - DATABASE_NAME=${SUBSCRIPTIONS_DATABASE_NAME:-dd_services_subscriptions}
        - ACCESS_KEY_PASSPHRASE=${ACCESS_KEY_PASSPHRASE}
        - KAFKA_URL=kafka_1:9092
        - CACHE_HOST=${CACHE_HOST}
        - CACHE_PORT=${CACHE_PORT}
        - CACHE_PASSWORD=${CACHE_PASSWORD}
      networks:
        - kafka
        - redis
        - public
        - database
      depends_on:
        - kafka_1
        - redisCache

  leader_db:
    image: mongo:6.0
    container_name: leader_db
    init: true
    environment:
      - MONGO_DATA_DIR=/data/db
      - MONGO_LOG_DIR=/data/logs
      - MONGO_INITDB_DATABASE=${ROOT_DATABASE_NAME}
      - MONGO_INITDB_ROOT_USERNAME=${ADMIN_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${ADMIN_PASSWORD}
      - REPLICA_SET_NAME=$REPLICA_SET_NAME
      - LEADER_DATABASE_HOST=${DATABASE_HOST}
      - BACKUP_DATABASE_1_HOST=${BACKUP_DATABASE_1_HOST}
      - BACKUP_DATABASE_2_HOST=${BACKUP_DATABASE_2_HOST}
      - DATABASE_PORT=${DATABASE_PORT}
      - USERS_DATABASE_NAME=${USERS_DATABASE_NAME:-dd_services_users}
      - USERS_DATABASE_USER=${USERS_DATABASE_USER}
      - USERS_DATABASE_PASSWORD=${USERS_DATABASE_PASSWORD}
      - FILES_DATABASE_NAME=${FILES_DATABASE_NAME:-dd_services_files}
      - FILES_DATABASE_USER=${FILES_DATABASE_USER}
      - FILES_DATABASE_PASSWORD=${FILES_DATABASE_PASSWORD}
      - SESSIONS_DATABASE_NAME=${SESSIONS_DATABASE_NAME:-dd_services_sessions}
      - SESSIONS_DATABASE_USER=${SESSIONS_DATABASE_USER}
      - SESSIONS_DATABASE_PASSWORD=${SESSIONS_DATABASE_PASSWORD}
      - SUBSCRIPTIONS_DATABASE_NAME=${SUBSCRIPTIONS_DATABASE_NAME:-dd_services_subscriptions}
      - SUBSCRIPTIONS_DATABASE_USER=${SUBSCRIPTIONS_DATABASE_USER}
      - SUBSCRIPTIONS_DATABASE_PASSWORD=${SUBSCRIPTIONS_DATABASE_PASSWORD}
      - INTROSPECTION_BEARER_TOKEN=${GATEWAY_BEARER_TOKEN}
    expose:
        - ${DATABASE_PORT}
    restart: unless-stopped
    volumes:
      - leaderDB:/data/db
      - leaderDB_config:/data/configdb
      - leaderDB_logs:/data/logs
      - ./dbs/scripts/rs-init.sh:/scripts/rs-init.sh
      - ./dbs/keyfile/keyfile.key:/keyfile/keyfile.key
    entrypoint:
      - bash
      - -c
      - |
          chmod 400 /keyfile/keyfile.key
          chown 999:999 /keyfile/keyfile.key
          chmod +x /scripts/rs-init.sh
          exec docker-entrypoint.sh $$@ 
    command: ["/usr/bin/mongod", "--bind_ip_all", "--replSet", "$REPLICA_SET_NAME", "--logpath", "/data/logs/mongo.log", "--auth", "--keyFile", "./keyfile/keyfile.key"]
    networks:
      - database

  backup_db_1:
    image: mongo:6.0
    container_name: backup_db_1
    init: true
    environment:
      - MONGO_DATA_DIR=/data/db
      - MONGO_LOG_DIR=/data/logs
    expose:
        - ${DATABASE_PORT}
    entrypoint:
        - bash
        - -c
        - |
            chmod 400 /keyfile/keyfile.key
            chown 999:999 /keyfile/keyfile.key
            exec docker-entrypoint.sh $$@ 
    command: [ "/usr/bin/mongod", "--bind_ip_all", "--replSet", $REPLICA_SET_NAME, "--logpath", "/data/logs/mongo.log", "--auth", "--keyFile", "./keyfile/keyfile.key" ]
    restart: unless-stopped
    volumes:
      - backupDB_1:/data/db
      - backupDB_1_config:/data/configdb
      - backupDB_1_logs:/data/logs
      - ./dbs/keyfile/keyfile.key:/keyfile/keyfile.key
    networks:
      - database

  backup_db_2:
    image: mongo:6.0
    container_name: backup_db_2
    init: true
    environment:
      - MONGO_DATA_DIR=/data/db
      - MONGO_LOG_DIR=/data/logs
    expose:
        - ${DATABASE_PORT}
    entrypoint:
      - bash
      - -c
      - |
          chmod 400 /keyfile/keyfile.key
          chown 999:999 /keyfile/keyfile.key
          exec docker-entrypoint.sh $$@ 
    command: [ "/usr/bin/mongod", "--bind_ip_all", "--replSet", $REPLICA_SET_NAME, "--logpath", "/data/logs/mongo.log", "--auth", "--keyFile", "./keyfile/keyfile.key" ]
    restart: unless-stopped
    volumes:
      - backupDB_2:/data/db
      - backupDB_2_config:/data/configdb
      - backupDB_2_logs:/data/logs
      - ./dbs/keyfile/keyfile.key:/keyfile/keyfile.key
    networks:
      - database

networks: 
  kafka:
    name: kafka
    internal: true
  services:
    name: services
    internal: true
  public:
    name: public
    internal: false
  database:
    name: database
    internal: true
  redis:
    name: redis
    internal: true

volumes:
  redisCache:
    driver_opts:
      type: none
      device: ${PWD}/redisCache
      o: bind
  gateway:
    # driver_opts:
    #   type: none
    #   device: ${PWD}/gateway
    #   o: bind
  subscriptions:
    # driver_opts:
    #   type: none
    #   device: ${PWD}/gateway
    #   o: bind
  users:
    # driver_opts:
    #   type: none
    #   device: ${PWD}/users
    #   o: bind
  files:
    # driver_opts:
    #   type: none
    #   device: ${PWD}/files
    #   o: bind
  sessions:
    # driver_opts:
    #   type: none
    #   device: ${PWD}/sessions
    #   o: bind
  leaderDB:
    driver_opts:
      type: none
      device: ${PWD}/dbs/leader/data
      o: bind
  leaderDB_config:
    driver_opts:
      type: none
      device: ${PWD}/dbs/leader/config
      o: bind
  leaderDB_logs:
    driver_opts:
      type: none
      device: ${PWD}/dbs/leader/logs
      o: bind
  backupDB_1:
    driver_opts:
      type: none
      device: ${PWD}/dbs/backup_1/data
      o: bind
  backupDB_1_config:
    driver_opts:
      type: none
      device: ${PWD}/dbs/backup_1/config
      o: bind
  backupDB_1_logs:
    driver_opts:
      type: none
      device: ${PWD}/dbs/backup_1/logs
      o: bind
  backupDB_2:
    driver_opts:
      type: none
      device: ${PWD}/dbs/backup_2/data
      o: bind
  backupDB_2_config:
    driver_opts:
      type: none
      device: ${PWD}/dbs/backup_2/config
      o: bind
  backupDB_2_logs:
    driver_opts:
      type: none
      device: ${PWD}/dbs/backup_2/logs
      o: bind
  kafka_1:
    driver_opts:
      type: none
      device: ${PWD}/kafka/data/kafka_1
      o: bind
  zookeeper_1:
    driver_opts:
      type: none
      device: ${PWD}/kafka/data/zookeeper_1
      o: bind